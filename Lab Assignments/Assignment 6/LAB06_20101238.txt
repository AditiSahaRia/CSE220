#Aditi Saha Ria
#ID: 20101238
#Task_01

def selection_sort(a,i,j):
    l = len(a)
    if i == l and j == l:
        return -1
    if i < l - 1:
        min = i
        while j < l:
            if a[j] < a[min]:
                min = j
            j = j + 1
        if min != i:
            temp = a[i]

            a[i] = a[min]

            a[min] = temp
        selection_sort(a, i + 1, i + 2)

A=[13,25,0,-4,7,-1,18,9,-6,21]

i=0

j=i+1

selection_sort(A,i,j)

print(A)


#===================================================================================#


#Aditi Saha Ria
#ID: 20101238
#Task_02

def insertion_sort(a,i):
    l = len(a)

    if i == l:
        return -1
    if i < l:

        j = i - 1

        key = a[i]

        while j >= 0 and key < a[j]:
            a[j + 1] = a[j]

            j = j - 1

        a[j + 1] = key

        insertion_sort(a, i + 1)

b=[22,5,14,2,7,1]

i=1

insertion_sort(b,i)

print(b)



#=========================================================================================



#Aditi Saha Ria
#ID: 20101238
#Task_03

class Node:
    def __init__(self, element, n=None):
        self.element = element
        self.next = n
class MyList:

    def __init__(self, array=None):
        #task_2 --> 1a
        if array==None:
            self.head = None
        # task_2 --> 1b
        elif isinstance(array,list):
            head = None
            tail = None
            for i in array:
                box = Node(i, None)
                if head == None:
                    head = box
                    tail = box
                else:
                    tail.next = box
                    tail = tail.next
            self.head = head
        # task_2 --> 1c
        elif isinstance(array, MyList):
            copyHead = None

            copyTail = None

            n = array.head

            while n != None:

                newNode = Node(n.element, None)

                if copyHead == None:

                    copyHead = newNode

                    copyTail = newNode

                else:

                    copyTail.next = newNode

                    copyTail = copyTail.next

                n = n.next
            self.head = copyHead

    # task_2 --> 2
    def showList(self):
        if self.head == None:
            print('Empty List')
        else:
            value = self.head
            while value != None:
                print(value.element, end=' ')
                value = value.next
            print()
    def bubble_sort(self):

        tail = self.head
        count = 0
        copy = 0

        while tail.next != None:
            tail = tail.next
            count += 1

        while copy<=count:
            if self.head.element > self.head.next.element:
                temp = Node(self.head.next.element,None)
                self.head.next = self.head.next.next
                temp.next = self.head
                self.head = temp

            copy_tale = self.head

            while copy_tale.next != None:
                if copy_tale.next is not None and copy_tale.next.next is not None:
                    if copy_tale.next.element > copy_tale.next.next.element:
                        temp = Node(copy_tale.next.next.element, None)
                        row = copy_tale.next.next.next
                        pre = Node(copy_tale.next.element, None)
                        temp.next = pre
                        pre.next = row
                        copy_tale.next = temp
                copy_tale = copy_tale.next

            copy = copy+1


a = [5,1,3,2,4,1,4,9]
b = MyList(a)
b.bubble_sort()
b.showList()



#===============================================================================================================




#Aditi Saha Ria
#ID: 20101238
#Task_04

class Node:
    def __init__(self, element, n=None):
        self.element = element
        self.next = n

class MyList:

    def __init__(self, array=None):

        if array == None:
            self.head = None

        elif isinstance(array, list):
            head = None
            tail = None
            for i in array:
                box = Node(i, None)
                if head == None:
                    head = box
                    tail = box
                else:
                    tail.next = box
                    tail = tail.next
            self.head = head

        elif isinstance(array, MyList):
            copyHead = None

            copyTail = None

            n = array.head

            while n != None:

                newNode = Node(n.element, None)

                if copyHead == None:

                    copyHead = newNode

                    copyTail = newNode

                else:

                    copyTail.next = newNode

                    copyTail = copyTail.next

                n = n.next
            self.head = copyHead

    # task_2 --> 2
    def showList(self):
        if self.head == None:
            print('Empty List')
        else:
            value = self.head
            while value != None:
                print(value.element, end=' ')
                value = value.next
            print()

    def selection_sort(self):

        tail = self.head
        count = 0
        copy = 0

        while tail.next != None:
            tail = tail.next
            count += 1

        while copy < count:
            max = self.head.element
            max_node = self.head
            tail = self.head.next
            find = 0
            while tail  is not None and find<count-copy:
                if tail.element > max:
                    max = tail.element
                    max_node = tail
                tail = tail.next
                find += 1

            if max_node == self.head and copy == 0:

                self.head = self.head.next
                tail = self.head
                while tail.next.next is not None:
                    tail = tail.next
                new_head = tail.next
                tail.next = max_node
                tail = tail.next
                tail.next = None
                new_head.next = self.head
                self.head = new_head

            else:

                tail = self.head

                while tail.next is not max_node and tail is not max_node:
                    tail = tail.next

                if tail is max_node:
                    hold = tail.next
                else:
                    hold = tail.next.next
                find = 0
                new = self.head

                while find < count-copy and new is not None:
                    new = new.next
                    find += 1

                if new == hold:
                    pre = new.next
                    max_node.next = pre

                    if tail is not max_node:
                        tail.next = new
                        new.next = max_node

                    elif tail is max_node and count-copy == 1:
                        hold.next = max_node
                        self.head = hold

                else:

                    another = tail

                    while another.next is not new:
                        another = another.next

                    another.next = max_node
                    pre = new.next
                    max_node.next = pre
                    new.next = hold
                    if tail is not  max_node:
                        tail.next = new
                    else:
                        self.head = new

            copy += 1

a = [10, 5, 9, 8, 3, 7, 4]
b = MyList(a)
b.selection_sort()
b.showList()
a = [10, 5, 4, 8]
b = MyList(a)
b.selection_sort()
b.showList()


#==========================================================================================================


#Aditi Saha Ria
#ID: 20101238
#Task_05

class Node:
    def __init__(self, val, n, p):
        self.val = val
        self.next = n
        self.prev = p

class DoublyList:
    def __init__(self, a):
        head = None
        tail = None
        for i in a:
            box = Node(i, None, None)
            if head is None:
                head = box
                tail = box
            else:
                tail.next = box
                tail.next.prev = tail
                tail = tail.next

        self.head = head

    def showlist(self):
        if self.head.next == self.head:
            print('Empty List')
        else:
            tail = self.head
            while tail.next is not None:
                print(tail.val, end='<=>')
                tail = tail.next
            print(tail.val)

    def insertion_sort(self, i):
        tail = self.head
        count = 0
        while tail is not None:
            tail = tail.next
            count = count + 1
        
        while i < count:
            j = i-1
            key = self.head
            l = 0
            while l<i and key != None:
                key = key.next
                l += 1
            temp = self.head
            l = 0
            while l<j and temp != None:
                temp = temp.next
                l += 1
            while j >=0 and key.val<temp.val:
                temp.next = temp
                j = j-1

            temp.next = key
            i += 1


arr = [50,40,30,20,10]
b = DoublyList(arr)
b.insertion_sort(1)
b.showlist()


#==========================================================================================================



#Aditi Saha Ria
#ID: 20101238
#Task_06


def binary_search(arr, l, r, val):
    if l <= r:
        m = (l+r)//2

        if val == arr[m]:
            return m
        elif val>arr[m]:
            return binary_search(arr, m+1, r, val)
        else:
            return binary_search(arr, l, m-1, val)
    return -1

arr = [10,20,30,40,50,60]
value = 40

ans = binary_search(arr, 0, len(arr)-1, value)

if ans == -1:
    print('Value not found')
else:
    print(f'Value is present at index no {ans}')




#==============================================================================================================



#Aditi Saha Ria
#ID: 20101238
#Task_07

A = list()
def F(n):
    if (n==0 or n==1):
        return 1
    else:
        return F(n-1)+F(n-2)
def FM(n):
    if(A[n] > 0):
        return A[n]
    if(n == 0 or n==1):
        return 1
    else:
        return A[n].append(FM(n-1)+FM(n-2))
def CalcFib(n):
    A.insert(0,0)
    A.insert(1,1)
    if n>1:
        for i in range(2,n+1):
            A.insert(i,A[i-1]+A[i-2])

a = 8
CalcFib(a)
print(FM(a))


#==================================================================